# Sim

```elixir
Mix.install([
  {:kino, "~> 0.10.0", only: [:dev]},
  {:ximula, path: Path.join(__DIR__, ".."), env: :dev}
])
```

## Structs

```elixir
defmodule Sim.Entity do
  # %Sim.Vegetation{size: 5, capacity: 50, ...}
  defstruct id: nil, type: Sim.Entity, value: 0
end

defmodule Sim.Field do
  defstruct position: nil,
            priority: :normal,
            vegetation: [],
            herbivores: [],
            predators: [],
            factories: [],
            buildings: [],
            transports: [],
            pawns: []
end
```

## Data

```elixir
defmodule Sim.Data do
  alias Ximula.{Grid, Torus}
  alias Ximula.AccessData
  alias Sim.Field

  def create(size) do
    Torus.create(size, size, fn x, y ->
      %Field{
        position: {x, y},
        vegetation: %Sim.Entity{type: Sim.Vegetation}
      }
    end)
  end

  def get_field({x, y}, pid) do
    AccessData.get_by(pid, fn map -> Torus.get(map, x, y) end)
  end

  def get_all_fields(pid) do
    AccessData.get_by(pid, &Grid.values(&1))
  end

  def positions(pid) do
    AccessData.get_by(pid, &Grid.map(&1, fn x, y, _ -> {x, y} end))
  end

  def lock_field(position, pid) do
    AccessData.lock(position, pid, &Grid.get(&1, &2))
  end

  def update_field(field, position, pid) do
    AccessData.update(position, field, pid, &Grid.put(&1, &2, &3))
  end
end
```

```elixir
data = Sim.Data.create(10)
{:ok, proxy} = Ximula.AccessData.start_link(data: data, name: :sim_data)
Sim.Data.get_field({0, 0}, proxy)
```

## Simulations

```elixir
defmodule Sim.Vegetation do
  alias Sim.Data

  def change(position, world) do
    position
    |> Data.lock_field(world)
    |> sim()
    |> Data.update_field(position, world)

    position
  end

  def sim(field) do
    # Process.sleep(5)
    if field.position == {9, 9}, do: raise("Sim Error")
    put_in(field.vegetation.value, 1)
  end
end

defmodule Sim.Herbivore do
  def change(position, _world) do
    position
  end
end

defmodule Sim.Predator do
  def change(position, _world) do
    Process.sleep(10)
    position
  end
end

defmodule Sim.Factory do
  def change(position, _world) do
    Process.sleep(20)
    position
  end
end

defmodule Sim.Transport do
  def change(position, _world) do
    Process.sleep(50)
    position
  end
end
```

## Simulator

```elixir
defmodule FieldSimulator do
  alias Ximula.Simulator
  alias Ximula.Sim.Queue
  alias Sim.Data

  @simulations [
    Sim.Vegetation,
    Sim.Herbivore,
    Sim.Predator,
    Sim.Factory,
    Sim.Transport
  ]

  def run_queue(%Queue{} = queue, opts) do
    Enum.map(@simulations, &sim_simulation(queue, &1, opts))
    |> aggregate_results(queue.name)
    |> notify_sum()
  end

  def sim_simulation(queue, simulation, opts) do
    Simulator.benchmark(fn ->
      get_positions(opts[:proxy], queue.name)
      |> Simulator.sim({simulation, :change, [opts[:proxy]]})
      |> handle_success(opts[:proxy])
      |> handle_failed(opts[:proxy])
      |> summarize(simulation)
      |> notify()
    end)
  end

  def get_positions(proxy, _name) do
    Data.positions(proxy)
  end

  def handle_success(%{ok: fields} = results, _proxy) do
    IO.puts("successful simulations: #{Enum.count(fields)}")
    results
  end

  def handle_failed(%{exit: failed} = results, _proxy) do
    Enum.each(failed, fn reason ->
      IO.puts("failed simulations: #{Exception.format_exit(reason)}")
    end)

    results
  end

  def summarize(%{ok: success, exit: failed}, simulation) do
    %{
      simulation: simulation,
      ok: success,
      error:
        Enum.map(failed, fn {id, {exception, stacktrace}} ->
          {id, Exception.normalize(:exit, exception, stacktrace) |> Exception.message()}
        end)
    }
  end

  # [{1097, %{error: [], ok: [], simulation: Sim.Vegetation}}]
  def aggregate_results(results, queue) do
    %{
      queue: queue,
      results:
        Enum.map(results, fn {time, %{error: error, ok: ok, simulation: simulation}} ->
          %{simulation: simulation, time: time, errors: Enum.count(error), ok: Enum.count(ok)}
        end)
    }
  end

  def notify_sum(results) do
    # PubSub.broadcast(topic, queue_result) | GenStage.cast(stage, {:receive, queue_result})
    dbg(results)
  end

  def notify(%{error: _error, ok: _ok, simulation: _simulation} = result) do
    # %{simulation: simulation, changed: ok} |> dbg()
    # %{simulation: simulation, failed: error} |> dbg()
    # PubSub.broadcast(topic, change) | GenStage.cast(stage, {:receive, change})
    result
  end
end
```

```elixir
Task.Supervisor.start_link(name: Ximula.Simulator.Task.Supervisor)
Task.Supervisor.start_link(name: Ximula.Sim.Loop.Task.Supervisor)
Ximula.Sim.Loop.start_link(sim_args: [proxy: :sim_data])
```

```elixir
Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
  name: :high,
  func: {FieldSimulator, :run_queue, [proxy: :sim_data]},
  interval: 2_000
})

# Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
#  name: :normal,
#  func: &FieldSimulator.run_queue/2,
#  interval: 2_000
# })

# Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
#  name: :low,
#  func: &FieldSimulator.run_queue/2,
#  interval: 10_000
# })
```

```elixir
require Logger
Logger.info("START!")
Ximula.Sim.Loop.start_sim()
Process.sleep(10_000)
Ximula.Sim.Loop.stop_sim()
Logger.info("END!")
```

```elixir
Sim.Data.all(map_pid)
```
