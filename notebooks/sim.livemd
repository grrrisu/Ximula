# Sim

```elixir
Mix.install([
  {:kino, "~> 0.10.0", only: [:dev]},
  {:ximula, path: Path.join(__DIR__, ".."), env: :dev}
])
```

## Structs

```elixir
defmodule Sim.Entity do
  # %Sim.Vegetation{size: 5, capacity: 50, ...}
  defstruct id: nil, type: Sim.Entity, value: 0
end

defmodule Sim.Field do
  defstruct position: nil,
            priority: :normal,
            vegetation: [],
            herbivores: [],
            predators: [],
            factories: [],
            buildings: [],
            transports: [],
            pawns: []
end
```

## Data

```elixir
defmodule Sim.Data do
  use Agent

  alias Ximula.Torus
  alias Sim.Field

  def start_link(size) do
    Agent.start_link(fn ->
      Torus.create(size, size, fn x, y ->
        %Field{
          position: {x, y},
          vegetation: %Sim.Entity{type: Sim.Vegetation}
        }
      end)
    end)
  end

  def all(pid) do
    Agent.get(pid, & &1)
  end

  def get_field(x, y, pid) do
    Agent.get(pid, fn map -> Torus.get(map, x, y) end)
  end

  def get_all_fields(pid) do
    Agent.get(pid, fn grid ->
      Enum.map(grid, fn {_x, col} ->
        Enum.map(col, fn {_y, value} ->
          value
        end)
      end)
      |> List.flatten()
    end)
  end

  def set_fields(fields, pid) do
    Agent.update(pid, fn grid ->
      Enum.reduce(fields, grid, fn field, acc ->
        {x, y} = field.position
        Torus.put(acc, x, y, field)
      end)
    end)
  end
end
```

```elixir
{:ok, map_pid} = Sim.Data.start_link(50)
proxy = Ximula.AccessProxy.start_link(agent: map_pid, name: :sim_data)
Ximula.AccessProxy.get(:sim_data)
```

## Simulations

```elixir
defmodule Sim.Vegetation do
  def sim(field) do
    # Process.sleep(5)
    if field.position == {13, 13}, do: raise("Sim Error")
    put_in(field.vegetation.value, 1)
  end
end

defmodule Sim.Herbivore do
  def sim(field) do
    # Process.sleep(5)
    field
  end
end

defmodule Sim.Predator do
  def sim(_field) do
    :no_change
  end
end

defmodule Sim.Factory do
  def sim(_field) do
    :no_change
  end
end

defmodule Sim.Transport do
  def sim(_field) do
    :no_change
  end
end
```

## Simulator

```elixir
defmodule FieldSimulator do
  alias Ximula.Simulator
  alias Ximula.Sim.Queue

  @simulations [
    Sim.Vegetation,
    Sim.Herbivore,
    Sim.Factory,
    Sim.Predator,
    Sim.Transport
  ]

  def sim(%Queue{} = queue, opts) do
    Enum.map(@simulations, &sim_simulation(queue, &1, opts))
    |> aggregate_results(queue.name)
    |> notify_sum()
  end

  def sim_simulation(queue, simulation, opts) do
    Simulator.benchmark(fn ->
      get_data(opts[:proxy], queue.name)
      |> Simulator.sim({simulation, :sim, []}, & &1.position)
      |> handle_success(opts[:proxy])
      |> handle_failed(opts[:proxy])
      |> summarize(simulation)
      |> notify()
    end)
  end

  def get_data(proxy, name) do
    Ximula.AccessProxy.exclusive_get(proxy, fn grid ->
      Ximula.Grid.filter(grid, fn _x, _y, field ->
        field.priority == name
      end)
    end)
  end

  def set_data(proxy, data) do
    Ximula.AccessProxy.update(proxy, fn grid ->
      Enum.reduce(data, grid, fn field, acc ->
        {x, y} = field.position
        Ximula.Torus.put(acc, x, y, field)
      end)
    end)
  end

  def handle_success(%{ok: fields} = results, proxy) do
    :ok = set_data(proxy, fields)
    results
  end

  def handle_failed(%{exit: failed} = results, _proxy) do
    Enum.each(failed, fn reason ->
      IO.puts("failed simulations: #{Exception.format_exit(reason)}")
    end)

    results
  end

  def summarize(%{ok: success, exit: failed}, simulation) do
    %{
      simulation: simulation,
      ok: Enum.map(success, & &1.position),
      error:
        Enum.map(failed, fn {id, {exception, stacktrace}} ->
          {id, Exception.normalize(:exit, exception, stacktrace) |> Exception.message()}
        end)
    }
  end

  # [{1097, %{error: [], ok: [], simulation: Sim.Vegetation}}]
  def aggregate_results(results, queue) do
    %{
      queue: queue,
      results:
        Enum.map(results, fn {time, %{error: error, ok: ok, simulation: simulation}} ->
          %{simulation: simulation, time: time, errors: Enum.count(error), ok: Enum.count(ok)}
        end)
    }
  end

  def notify_sum(results) do
    # PubSub.broadcast(topic, queue_result) | GenStage.cast(stage, {:receive, queue_result})
    dbg(results)
  end

  def notify(%{error: _error, ok: _ok, simulation: _simulation} = result) do
    # %{simulation: simulation, changed: ok} |> dbg()
    # %{simulation: simulation, failed: error} |> dbg()
    # PubSub.broadcast(topic, change) | GenStage.cast(stage, {:receive, change})
    result
  end
end
```

```elixir
Task.Supervisor.start_link(name: Ximula.Simulator.Task.Supervisor)
Task.Supervisor.start_link(name: Ximula.Sim.Loop.Task.Supervisor)
Ximula.Sim.Loop.start_link(sim_args: [proxy: :sim_data])
```

```elixir
Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
  name: :high,
  func: {FieldSimulator, :sim, [proxy: :sim_data]},
  interval: 500
})

Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
  name: :normal,
  func: &FieldSimulator.sim/2,
  interval: 2_000
})

Ximula.Sim.Loop.add_queue(%Ximula.Sim.Queue{
  name: :low,
  func: &FieldSimulator.sim/2,
  interval: 10_000
})
```

```elixir
Ximula.Sim.Loop.start_sim()
Process.sleep(5_000)
Ximula.Sim.Loop.stop_sim()
```

```elixir
Sim.Data.all(map_pid)
```
